import 'dart:core';
import 'dart:typed_data';

import 'package:code_builder/code_builder.dart';
import 'package:dart_style/dart_style.dart';
import 'package:rive_native/rive_native.dart' as rive;

class RiveParser {
  final Uint8List bytes;

  RiveParser(this.bytes);
  final generatedClasses = <String>{};
  Future<String> generateDartCode() async {
    generatedClasses.clear();
    await rive.RiveNative.init();
    final riveFile = await rive.File.decode(bytes, riveFactory: rive.Factory.flutter);

    if (riveFile == null) {
      throw Exception('Failed to decode Rive file');
    }

    final library = Library((lib) {
      lib.docs.addAll([
        '// This file was generated by rive_viewmodel_generator',
        '// Do not edit this file manually',
        '// ignore_for_file: avoid_positional_boolean_parameters',
        '// ignore_for_file: unused_import',
      ]);
      lib.directives.add(Directive.import('dart:async'));
      lib.directives.add(Directive.import('dart:ui'));
      lib.directives.add(Directive.import('package:rive_native/rive_native.dart'));
      final classNames = <String>{};
      for (var i = 0; i < riveFile.viewModelCount; i++) {
        final viewModel = riveFile.viewModelByIndex(i);
        if (viewModel != null) {
          final classes = _generateViewModelClass(
            viewModel.name.toClassName().sanitizeIdentifier().append('ViewModel'),
            viewModel.createDefaultInstance()!,
            riveFile,
            classNames,
          );
          for (final c in classes) {
            lib.body.add(c);
          }
        }
      }
    });
    final emitter = DartEmitter();
    final rawCode = library.accept(emitter).toString().replaceFirst(RegExp(r'^library;\n?', multiLine: true), '');
    return DartFormatter().format(rawCode);
  }

  List<Spec> _generateViewModelClass(
    String className,
    rive.ViewModelInstance viewModel,
    rive.File riveFile,
    Set<String> classNames, {
    String? parent,
  }) {
    if (className.isEmpty) return []; // Skip empty class names
    if (classNames.contains(className)) return []; // Avoid duplicate classes
    classNames.add(className);

    final List<Spec> specs = [];
    // Generate enums and nested view models first
    for (final property in viewModel.properties) {
      final sanitizedPropName = property.name.sanitizeIdentifier();
      if (sanitizedPropName.isEmpty) continue; // Skip empty property names
      switch (property.type) {
        case rive.DataType.enumType:
          final propertyName = _getDartType(property, riveFile, viewModel);
          if (propertyName.isEmpty) break;
          final enumFromRive = riveFile.enums.firstWhere(
            (e) => propertyName.endsWith(e.name.sanitizeIdentifier().toCamelCase().capitalize()),
            orElse: () => rive.DataEnum(property.name, []),
          );
          final enumName = enumFromRive.name.toClassName();
          final enumValues = enumFromRive.values;
          if (enumValues.isNotEmpty && !generatedClasses.contains(enumName)) {
            generatedClasses.add(enumName);
            specs.add(
              Enum((e) {
                e.name = enumName;
                e.values.addAll(
                  enumValues.map((value) => EnumValue((ev) => ev.name = value.toEnumValue().sanitizeIdentifier())),
                );
              }),
            );
          }
        case rive.DataType.viewModel:
          // Nested view model
          final nestedViewModel = viewModel.viewModel(property.name);
          if (nestedViewModel != null) {
            if (!generatedClasses.contains(className)) {
              generatedClasses.add(className);
            }
            specs.addAll(
              _generateViewModelClass(
                property.name.toClassName().sanitizeIdentifier().append('ViewModel'),
                nestedViewModel,
                riveFile,
                classNames,
                parent: className,
              ),
            );
          }
        default:
      }
    }

    // Generate the implementation
    final classBuilder =
        ClassBuilder()
          ..name = className
          ..fields.add(
            Field(
              (f) =>
                  f
                    ..name = '_viewModel'
                    ..type = refer('ViewModelInstance')
                    ..modifier = FieldModifier.final$,
            ),
          )
          ..fields.add(
            Field(
              (f) =>
                  f
                    ..name = '_streamControllers'
                    ..type = refer('Map<String, StreamController<dynamic>>')
                    ..modifier = FieldModifier.final$
                    ..assignment = Code('{}'),
            ),
          )
          ..constructors.add(
            Constructor((c) {
              c.name = '_';
              c.requiredParameters.add(Parameter((p) => p..name = 'this._viewModel'));
            }),
          )
          ..constructors.add(
            Constructor((c) {
              c.factory = true;
              c.name = 'fromViewModel';
              c.requiredParameters.add(
                Parameter(
                  (p) =>
                      p
                        ..name = 'viewModel'
                        ..type = refer('ViewModelInstance'),
                ),
              );
              c.redirect = refer('${className}._');
            }),
          );

    for (final property in viewModel.properties) {
      final sanitizedPropName = property.name.sanitizeIdentifier();
      if (sanitizedPropName.isEmpty) continue;
      final camelProp = property.name.sanitizeIdentifier().toCamelCase();
      final streamProp = '${camelProp}Stream';
      switch (property.type) {
        case rive.DataType.boolean:
          classBuilder.methods.add(
            Method((m) {
              m.returns = refer('bool');
              m.type = MethodType.getter;
              m.name = camelProp;
              m.body = Code("_viewModel.boolean('${property.name}')!.value");
              m.lambda = true;
            }),
          );
          classBuilder.methods.add(
            Method((m) {
              m.type = MethodType.setter;
              m.name = camelProp;
              m.requiredParameters.add(
                Parameter(
                  (p) =>
                      p
                        ..name = 'value'
                        ..type = refer('bool'),
                ),
              );
              m.body = Code("_viewModel.boolean('${property.name}')!.value = value");
              m.lambda = true;
            }),
          );
          // Add stream getter for bool
          classBuilder.methods.add(
            Method((m) {
              m.returns = refer('Stream<bool>');
              m.type = MethodType.getter;
              m.name = streamProp;
              m.body = Code('''
return (_streamControllers['${property.name}'] ??= () {
  final controller = StreamController<bool>.broadcast();
  _streamControllers['${property.name}'] = controller;
  final property = _viewModel.boolean('${property.name}')!;
  void valueListener(bool value) => controller.add(value);
  void onListen() => property.addListener(valueListener);
  void onCancel() => property.removeListener(valueListener);
  controller
    ..onListen = onListen
    ..onCancel = onCancel;
  return controller;
}()).stream as Stream<bool>;''');
            }),
          );
        case rive.DataType.number:
          final type = _getDartType(property, riveFile, viewModel);
          if (type == 'int') {
            classBuilder.methods.add(
              Method((m) {
                m.returns = refer('int');
                m.type = MethodType.getter;
                m.name = camelProp;
                m.body = Code("_viewModel.number('${property.name}')!.value.toInt()");
                m.lambda = true;
              }),
            );
            classBuilder.methods.add(
              Method((m) {
                m.type = MethodType.setter;
                m.name = camelProp;
                m.requiredParameters.add(
                  Parameter(
                    (p) =>
                        p
                          ..name = 'value'
                          ..type = refer('int'),
                  ),
                );
                m.body = Code("_viewModel.number('${property.name}')!.value = value.toDouble()");
                m.lambda = true;
              }),
            );
            // Add stream getter for int
            classBuilder.methods.add(
              Method((m) {
                m.returns = refer('Stream<int>');
                m.type = MethodType.getter;
                m.name = streamProp;
                m.body = Code('''
return (_streamControllers['${property.name}'] ??= () {
  final controller = StreamController<int>.broadcast();
  _streamControllers['${property.name}'] = controller;
  final property = _viewModel.number('${property.name}')!;
  void valueListener(double value) => controller.add(value.toInt());
  void onListen() => property.addListener(valueListener);
  void onCancel() => property.removeListener(valueListener);
  controller
    ..onListen = onListen
    ..onCancel = onCancel;
  return controller;
}()).stream as Stream<int>;''');
              }),
            );
          } else {
            classBuilder.methods.add(
              Method((m) {
                m.returns = refer('double');
                m.type = MethodType.getter;
                m.name = camelProp;
                m.body = Code("_viewModel.number('${property.name}')!.value");
                m.lambda = true;
              }),
            );
            classBuilder.methods.add(
              Method((m) {
                m.type = MethodType.setter;
                m.name = camelProp;
                m.requiredParameters.add(
                  Parameter(
                    (p) =>
                        p
                          ..name = 'value'
                          ..type = refer('double'),
                  ),
                );
                m.body = Code("_viewModel.number('${property.name}')!.value = value");
                m.lambda = true;
              }),
            );
            // Add stream getter for double
            classBuilder.methods.add(
              Method((m) {
                m.returns = refer('Stream<double>');
                m.type = MethodType.getter;
                m.name = streamProp;
                m.body = Code('''
return (_streamControllers['${property.name}'] ??= () {
  final controller = StreamController<double>.broadcast();
  _streamControllers['${property.name}'] = controller;
  final property = _viewModel.number('${property.name}')!;
  void valueListener(double value) => controller.add(value);
  void onListen() => property.addListener(valueListener);
  void onCancel() => property.removeListener(valueListener);
  controller
    ..onListen = onListen
    ..onCancel = onCancel;
  return controller;
}()).stream as Stream<double>;''');
              }),
            );
          }
          break;
        case rive.DataType.enumType:
          final enumName = generatedClasses.firstWhere(
            (e) => property.name.toClassName().sanitizeIdentifier().endsWith(e),
          );
          classBuilder.methods.add(
            Method((m) {
              m.returns = refer(enumName);
              m.type = MethodType.getter;
              m.name = camelProp;
              m.body = Code(
                "$enumName.values.firstWhere((e) => e.name == _viewModel.enumerator('${property.name}')!.value)",
              );
              m.lambda = true;
            }),
          );
          classBuilder.methods.add(
            Method((m) {
              m.type = MethodType.setter;
              m.name = camelProp;
              m.requiredParameters.add(
                Parameter(
                  (p) =>
                      p
                        ..name = 'value'
                        ..type = refer(enumName),
                ),
              );
              m.body = Code("_viewModel.enumerator('${property.name}')!.value = value.name");
              m.lambda = true;
            }),
          );
          // Add stream getter for enum
          classBuilder.methods.add(
            Method((m) {
              m.returns = refer('Stream<$enumName>');
              m.type = MethodType.getter;
              m.name = streamProp;
              m.body = Code('''
return (_streamControllers['${property.name}'] ??= () {
  final controller = StreamController<$enumName>.broadcast();
  _streamControllers['${property.name}'] = controller;
  final property = _viewModel.enumerator('${property.name}')!;
  void valueListener(String value) => controller.add($enumName.values.firstWhere((e) => e.name == value));
  void onListen() => property.addListener(valueListener);
  void onCancel() => property.removeListener(valueListener);
  controller
    ..onListen = onListen
    ..onCancel = onCancel;
  return controller;
}()).stream as Stream<$enumName>;''');
            }),
          );
          break;
        case rive.DataType.viewModel:
          final nestedViewModel = viewModel.viewModel(property.name);
          if (nestedViewModel != null) {
            final nestedClassName = property.name.toClassName().sanitizeIdentifier().append('ViewModel');
            classBuilder.methods.add(
              Method((m) {
                m.returns = refer(nestedClassName);
                m.type = MethodType.getter;
                m.name = property.name.toCamelCase().sanitizeIdentifier();
                m.body = Code("return $nestedClassName.fromViewModel(_viewModel.viewModel('${property.name}')!);");
              }),
            );
          }
        case rive.DataType.color:
          classBuilder.methods.add(
            Method((m) {
              m.returns = refer('Color');
              m.type = MethodType.getter;
              m.name = camelProp;
              m.body = Code("_viewModel.color('${property.name}')!.value");
              m.lambda = true;
            }),
          );
          classBuilder.methods.add(
            Method((m) {
              m.type = MethodType.setter;
              m.name = camelProp;
              m.requiredParameters.add(
                Parameter(
                  (p) =>
                      p
                        ..name = 'value'
                        ..type = refer('Color'),
                ),
              );
              m.body = Code("_viewModel.color('${property.name}')!.value = value");
              m.lambda = true;
            }),
          );
          // Add stream getter for Color
          classBuilder.methods.add(
            Method((m) {
              m.returns = refer('Stream<Color>');
              m.type = MethodType.getter;
              m.name = streamProp;
              m.body = Code('''
return (_streamControllers['${property.name}'] ??= () {
  final controller = StreamController<Color>.broadcast();
  _streamControllers['${property.name}'] = controller;
  final property = _viewModel.color('${property.name}')!;
  void valueListener(Color value) => controller.add(value);
  void onListen() => property.addListener(valueListener);
  void onCancel() => property.removeListener(valueListener);
  controller
    ..onListen = onListen
    ..onCancel = onCancel;
  return controller;
}()).stream as Stream<Color>;''');
            }),
          );
          break;
        case rive.DataType.trigger:
          classBuilder.methods.add(
            Method((m) {
              m.returns = refer('void');
              m.name =
                  property.name.toCamelCase().startsWith('trigger')
                      ? property.name.toCamelCase()
                      : 'trigger${property.name.toCamelCase().capitalize()}';
              m.body = Code("_viewModel.trigger('${property.name}')!.trigger()");
              m.lambda = true;
            }),
          );
        case rive.DataType.string:
          classBuilder.methods.add(
            Method((m) {
              m.returns = refer('String');
              m.type = MethodType.getter;
              m.name = camelProp;
              m.body = Code("_viewModel.string('${property.name}')!.value");
              m.lambda = true;
            }),
          );
          classBuilder.methods.add(
            Method((m) {
              m.type = MethodType.setter;
              m.name = camelProp;
              m.requiredParameters.add(
                Parameter(
                  (p) =>
                      p
                        ..name = 'value'
                        ..type = refer('String'),
                ),
              );
              m.body = Code("_viewModel.string('${property.name}')!.value = value");
              m.lambda = true;
            }),
          );
          // Add stream getter for String
          classBuilder.methods.add(
            Method((m) {
              m.returns = refer('Stream<String>');
              m.type = MethodType.getter;
              m.name = streamProp;
              m.body = Code('''
return (_streamControllers['${property.name}'] ??= () {
  final controller = StreamController<String>.broadcast();
  _streamControllers['${property.name}'] = controller;
  final property = _viewModel.string('${property.name}')!;
  void valueListener(String value) => controller.add(value);
  void onListen() => property.addListener(valueListener);
  void onCancel() => property.removeListener(valueListener);
  controller
    ..onListen = onListen
    ..onCancel = onCancel;
  return controller;
}()).stream as Stream<String>;''');
            }),
          );
          break;
        case rive.DataType.list:
        case rive.DataType.none:
        case rive.DataType.integer:
        case rive.DataType.symbolListIndex:
        case rive.DataType.image:
      }
    }
    classBuilder.methods.add(
      Method((m) {
        m.returns = refer('void');
        m.name = 'bind';
        m.requiredParameters.add(
          Parameter(
            (p) =>
                p
                  ..name = 'stateMachine'
                  ..type = refer('StateMachine'),
          ),
        );
        m.lambda = true;
        m.body = Code('stateMachine.bindViewModelInstance(_viewModel)');
      }),
    );
    classBuilder.methods.add(
      Method((m) {
        m.returns = refer('void');
        m.name = 'dispose';
        m.body = Code('''
for (final controller in _streamControllers.values) {
  controller.close();
}
_streamControllers.clear();
_viewModel.dispose();''');
      }),
    );
    specs.add(classBuilder.build());
    return specs;
  }

  String _getDartType(rive.ViewModelProperty property, rive.File riveFile, rive.ViewModelInstance viewModel) {
    switch (property.type) {
      case rive.DataType.number:
        return 'double';
      case rive.DataType.boolean:
        return 'bool';
      case rive.DataType.enumType:
        return property.name.toClassName().sanitizeIdentifier();
      case rive.DataType.viewModel:
        final nested = viewModel.viewModel(property.name);
        if (nested != null) {
          return nested.name.toClassName().sanitizeIdentifier();
        }
        if (viewModel.viewModel(property.name) != null) {
          return property.name.sanitizeIdentifier();
        }
        return 'dynamic';
      case rive.DataType.color:
      case rive.DataType.list:
      case rive.DataType.trigger:
      case rive.DataType.none:
      case rive.DataType.string:
      case rive.DataType.integer:
      case rive.DataType.symbolListIndex:
      case rive.DataType.image:
        return 'dynamic';
    }
  }
}

extension StringExtensions on String {
  String capitalize() {
    return isEmpty ? '' : this[0].toUpperCase() + substring(1);
  }

  String toEnumValue() {
    return toLowerCase()
        .replaceAll(RegExp(r'[^a-z0-9]'), '_')
        .replaceAll(RegExp(r'_+'), '_')
        .replaceAll(RegExp(r'^_|_$'), '');
  }

  String toCamelCase() {
    if (!contains(RegExp(r'[-_]')) && isNotEmpty && this[0].toLowerCase() == this[0]) {
      return this;
    }
    final words = split(RegExp(r'[-_]'));
    return words.isEmpty
        ? ''
        : words[0].toLowerCase() +
            words.skip(1).map((word) => word.isEmpty ? '' : word[0].toUpperCase() + word.substring(1)).join('');
  }

  String toClassName() {
    return split(RegExp(r'[-_]')).map((word) => word.isEmpty ? '' : word.capitalize()).join('');
  }

  String toSnakeCase() {
    return replaceAllMapped(
      RegExp(r'([A-Z])'),
      (match) => '_${match.group(1)!.toLowerCase()}',
    ).replaceFirst(RegExp(r'^_'), '');
  }

  String sanitizeIdentifier() {
    var sanitized = replaceAll(RegExp(r'[^a-zA-Z0-9_]'), '_');
    if (sanitized.isEmpty || RegExp(r'^[0-9]').hasMatch(sanitized)) {
      sanitized = '_$sanitized';
    }
    return sanitized;
  }

  String append(String s) {
    if (!endsWith(s)) return '$this$s';
    return this;
  }
}
